import tkinter as tk
from tkinter import scrolledtext, messagebox, Frame, filedialog, ttk
import random
import threading
import os
import json


class SpellingTrainerGUI:
    def __init__(self, root, audio_player, stats_manager, settings):
        self.root = root
        self.audio_player = audio_player
        self.stats_manager = stats_manager
        self.settings = settings

        self.words_attempted = set()
        self.words = []
        self.shuffled_words = []
        self.current_word_index = 0
        self.audio_folder = settings.get('audio_folder', '')
        self.last_words_file = settings.get('last_words_file', '')

        self.root.title("–¢—Ä–µ–Ω–∞–∂–µ—Ä –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤")
        self.root.geometry("900x650")

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        self.setup_frame = Frame(self.root)
        self.training_frame = Frame(self.root)

        self.create_setup_widgets()
        self.create_training_widgets()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.restore_settings()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.show_setup_frame()

    def create_setup_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤"""
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        self.folder_frame = tk.LabelFrame(self.setup_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
        self.folder_frame.pack(pady=10, padx=10, fill="x")

        self.folder_path_var = tk.StringVar(value=self.audio_folder)
        self.folder_entry = tk.Entry(self.folder_frame, textvariable=self.folder_path_var,
                                     font=("Arial", 10), state="readonly")
        self.folder_entry.pack(side="left", fill="x", expand=True, padx=5, pady=5)

        self.browse_btn = tk.Button(self.folder_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                                    command=self.browse_folder, font=("Arial", 10))
        self.browse_btn.pack(side="right", padx=5, pady=5)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        self.file_buttons_frame = tk.Frame(self.setup_frame)
        self.file_buttons_frame.pack(pady=5, padx=10, fill="x")

        self.load_words_btn = tk.Button(self.file_buttons_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞",
                                        command=self.load_words_from_file, font=("Arial", 10))
        self.load_words_btn.pack(side="left", padx=5)

        self.save_words_btn = tk.Button(self.file_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Ñ–∞–π–ª",
                                        command=self.save_words_to_file, font=("Arial", 10))
        self.save_words_btn.pack(side="left", padx=5)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        self.words_frame = tk.LabelFrame(self.setup_frame, text="–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        self.words_frame.pack(pady=10, padx=10, fill="both", expand=True)

        instruction_label = tk.Label(self.words_frame,
                                     text="–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
                                     font=("Arial", 10))
        instruction_label.pack(pady=5)

        self.words_text = scrolledtext.ScrolledText(self.words_frame, height=12, font=("Arial", 12))
        self.words_text.pack(pady=10, padx=10, fill="both", expand=True)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
        self.progress_frame = tk.Frame(self.setup_frame)
        self.progress_frame.pack(pady=5, padx=10, fill="x")

        self.progress_label = tk.Label(self.progress_frame, text="", font=("Arial", 9))
        self.progress_label.pack()

        self.progress_bar = ttk.Progressbar(self.progress_frame, mode='determinate')
        self.progress_bar.pack(fill="x", pady=5)
        self.progress_bar.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        self.start_btn = tk.Button(self.setup_frame, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                                   command=self.prepare_and_start_training, font=("Arial", 12), bg="lightgreen")
        self.start_btn.pack(pady=10)

    def create_training_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        self.back_btn = tk.Button(self.training_frame, text="‚Üê –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                                  command=self.show_setup_frame, font=("Arial", 10))
        self.back_btn.pack(anchor="nw", pady=5, padx=5)

        # –û–±–ª–∞—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        self.word_info_label = tk.Label(self.training_frame, text="", font=("Arial", 10))
        self.word_info_label.pack(pady=5)

        self.current_word_label = tk.Label(self.training_frame, text="–ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
                                           font=("Arial", 16, "bold"))
        self.current_word_label.pack(pady=20)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        self.answer_frame = tk.Frame(self.training_frame)
        self.answer_frame.pack(pady=20)

        tk.Label(self.answer_frame, text="–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:", font=("Arial", 12)).pack()
        self.answer_entry = tk.Entry(self.answer_frame, font=("Arial", 16), width=30)
        self.answer_entry.pack(pady=10)
        self.answer_entry.bind("<Return>", self.check_answer)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        self.buttons_frame = tk.Frame(self.training_frame)
        self.buttons_frame.pack(pady=20)

        self.speak_btn = tk.Button(self.buttons_frame, text="üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å —Å–ª–æ–≤–æ",
                                   command=self.speak_word, font=("Arial", 12), bg="lightblue")
        self.speak_btn.pack(side="left", padx=10)

        self.check_btn = tk.Button(self.buttons_frame, text="‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                                   command=self.check_answer, font=("Arial", 12), bg="lightgreen")
        self.check_btn.pack(side="left", padx=10)

        # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.finish_btn = tk.Button(self.buttons_frame, text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                   command=self.finish_testing, font=("Arial", 12), bg="orange")
        self.finish_btn.pack(side="left", padx=10)

        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_label = tk.Label(self.training_frame, text="", font=("Arial", 14))
        self.result_label.pack(pady=10)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        self.stats_frame = tk.LabelFrame(self.training_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏")
        self.stats_frame.pack(pady=10, padx=10, fill="x")

        self.stats_label = tk.Label(self.stats_frame, text="–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: 0\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: 0%",
                                    font=("Arial", 10))
        self.stats_label.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.show_stats_btn = tk.Button(self.stats_frame, text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                                        command=self.show_full_stats, font=("Arial", 10))
        self.show_stats_btn.pack(pady=5)

    def restore_settings(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if self.audio_folder:
            self.audio_player.set_audio_folder(self.audio_folder)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.last_words_file and os.path.exists(self.last_words_file):
            try:
                self.load_words_from_file(self.last_words_file, is_start = True)
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
                self.words_text.insert("1.0",
                                       "–≤–æ–∫–∑–∞–ª\n–ø–∞—Ä–∞—à—é—Ç\n–∞–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç\n–±—é–ª–ª–µ—Ç–µ–Ω—å\n–¥–µ—Ä–µ–≤–Ω—è\n–∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç\n–ø—Ä–æ—Ñ–µ—Å—Å–∏—è\n–∫–æ–ª–ª–µ–∫—Ç–∏–≤\n—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\n–¥–∏—Å–∫—É—Å—Å–∏—è")
        else:
            self.words_text.insert("1.0",
                                   "–≤–æ–∫–∑–∞–ª\n–ø–∞—Ä–∞—à—é—Ç\n–∞–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç\n–±—é–ª–ª–µ—Ç–µ–Ω—å\n–¥–µ—Ä–µ–≤–Ω—è\n–∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç\n–ø—Ä–æ—Ñ–µ—Å—Å–∏—è\n–∫–æ–ª–ª–µ–∫—Ç–∏–≤\n—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\n–¥–∏—Å–∫—É—Å—Å–∏—è")

    def load_words_from_file(self, filename=None, is_start = False):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not filename:
            filename = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
            if not filename:
                return

        try:
            with open(filename, 'r', encoding='utf-8') as f:
                words_content = f.read().strip()

            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
            self.words_text.delete("1.0", tk.END)
            self.words_text.insert("1.0", words_content)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            self.last_words_file = filename
            self.save_settings()

            if not is_start:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–ª–æ–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {os.path.basename(filename)}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")

    def save_words_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Ñ–∞–π–ª",
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if not filename:
            return

        try:
            words_content = self.words_text.get("1.0", tk.END).strip()
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(words_content)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            self.last_words_file = filename
            self.save_settings()

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {os.path.basename(filename)}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings['audio_folder'] = self.audio_folder
        self.settings['last_words_file'] = self.last_words_file

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (—Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ main.py)
        try:
            from main import save_settings
            save_settings(self.settings)
        except:
            pass

    def browse_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤",
            initialdir=self.audio_folder if self.audio_folder else None
        )
        if folder:
            self.folder_path_var.set(folder)
            self.audio_folder = folder
            self.audio_player.set_audio_folder(folder)
            self.save_settings()

    def show_setup_frame(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ñ—Ä–µ–π–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        self.training_frame.pack_forget()
        self.setup_frame.pack(fill="both", expand=True)

    def show_training_frame(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—Ä–µ–π–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ñ—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.setup_frame.pack_forget()
        self.training_frame.pack(fill="both", expand=True)
        self.answer_entry.focus()

    def prepare_and_start_training(self):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        if not self.audio_folder:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤!")
            return

        text = self.words_text.get("1.0", tk.END).strip()
        self.words = [word.strip() for word in text.split('\n') if word.strip()]

        if not self.words:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ!")
            return

        if len(self.words) < 2:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.start_btn.config(state="disabled", text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...")
        self.progress_bar.pack(fill="x", pady=5)
        self.progress_label.config(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._generate_audio_files, daemon=True).start()

    def _generate_audio_files(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            def progress_callback(progress, current_word):
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.root.after(0, lambda: self._update_progress(progress, current_word))

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            self.audio_player.generate_all_audio_files(self.words, progress_callback)

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            self.root.after(0, self._finish_preparation)

        except Exception as e:
            self.root.after(0, lambda: self._handle_generation_error(str(e)))

    def _update_progress(self, progress, current_word):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        self.progress_bar["value"] = progress
        if "–û—à–∏–±–∫–∞:" in str(current_word):
            self.progress_label.config(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.0f}% - {current_word}")
        else:
            self.progress_label.config(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.0f}% - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {current_word}")

    def _finish_preparation(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
        self.progress_bar.pack_forget()
        self.progress_label.config(text="")
        self.start_btn.config(state="normal", text="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_settings()

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        self.shuffle_words()
        self.show_training_frame()
        self.next_word()

    def _handle_generation_error(self, error_message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.progress_bar.pack_forget()
        self.progress_label.config(text="")
        self.start_btn.config(state="normal", text="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:\n{error_message}")

    def shuffle_words(self):
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤"""
        self.shuffled_words = self.words.copy()
        random.shuffle(self.shuffled_words)
        self.current_word_index = 0
        self.words_attempted.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        self.stats_manager.reset_current_session()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

    def speak_word(self):
        """–û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ"""
        if not self.shuffled_words:
            return

        current_word = self.shuffled_words[self.current_word_index]
        self.audio_player.speak_word(current_word, self.on_audio_error)

    def on_audio_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        self.root.after(0, lambda msg=error_message: messagebox.showerror("–û—à–∏–±–∫–∞",
                                                                          f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ: {msg}"))

    def next_word(self):
        if not self.shuffled_words:
            return

        self.current_word_index = (self.current_word_index + 1) % len(self.shuffled_words)
        self.answer_entry.delete(0, tk.END)
        self.result_label.config(text="")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–ª–æ–≤–µ
        self.word_info_label.config(
            text=f"–°–ª–æ–≤–æ {self.current_word_index} –∏–∑ {len(self.shuffled_words)} (–ø–æ—Ä—è–¥–æ–∫ —Å–ª—É—á–∞–π–Ω—ã–π)"
        )
        self.current_word_label.config(text="???")

        self.answer_entry.focus()
        self.speak_word()

    def check_answer(self, event=None):
        if not self.shuffled_words:
            return

        user_answer = self.answer_entry.get().strip()
        correct_word = self.shuffled_words[self.current_word_index]

        if not user_answer:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ!")
            return

        is_correct = user_answer.lower() == correct_word.lower()

        if is_correct:
            self.result_label.config(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ", fg="green")
        else:
            self.result_label.config(text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_word}", fg="red")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
        self.current_word_label.config(text=correct_word)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats_manager.add_attempt(correct_word, is_correct, user_answer.lower())
        self.update_stats_display()

        # –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ
        self.words_attempted.add(correct_word)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã
        if len(self.words_attempted) >= len(self.shuffled_words):
            self.root.after(1000, self.finish_testing)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            self.root.after(1000, self.next_word)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º

    def update_stats_display(self):
        stats = self.stats_manager.get_stats()
        total = stats['total_attempts']
        correct = stats['correct_attempts']
        percentage = self.stats_manager.get_percentage()

        self.stats_label.config(
            text=f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} ({percentage:.1f}%)"
        )

    def show_full_stats(self):
        stats_window = tk.Toplevel(self.root)
        stats_window.title("–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_window.geometry("500x400")

        text_area = scrolledtext.ScrolledText(stats_window, font=("Arial", 10))
        text_area.pack(pady=10, padx=10, fill="both", expand=True)

        stats = self.stats_manager.get_stats()
        stats_text = "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–õ–û–í–ê–ú:\n\n"

        for word, data in stats['word_stats'].items():
            attempts = data['attempts']
            correct = data['correct']
            percentage = (correct / attempts * 100) if attempts > 0 else 0
            stats_text += f"{word}: {correct}/{attempts} ({percentage:.1f}%)\n"

        stats_text += f"\n–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        stats_text += f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}\n"
        stats_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_attempts']}\n"
        stats_text += f"–°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {stats['session_start']}\n"
        stats_text += f"–ü–∞–ø–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {self.audio_folder}"

        text_area.insert("1.0", stats_text)
        text_area.config(state="disabled")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.audio_player.cleanup()

    def _retry_testing(self, results_window):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        results_window.destroy()
        self.shuffle_words()
        self.next_word()

    def finish_testing(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        if not self.shuffled_words:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        errors = self.stats_manager.get_current_session_errors()
        grade = self.stats_manager.calculate_grade()

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_window = tk.Toplevel(self.root)
        results_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        results_window.geometry("600x500")
        results_window.resizable(True, True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Ü–µ–Ω–∫–æ–π
        grade_label = tk.Label(results_window,
                               text=f"–û—Ü–µ–Ω–∫–∞: {grade}",
                               font=("Arial", 20, "bold"),
                               fg="green" if grade >= 4 else "orange" if grade == 3 else "red")
        grade_label.pack(pady=10)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_words = len(self.shuffled_words)
        correct_words = total_words - sum(errors.values())
        errors_count = sum(errors.values())

        stats_text = f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}\n"
        stats_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_words}\n"
        stats_text += f"–û—à–∏–±–æ–∫: {errors_count}\n"
        stats_text += f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {(correct_words / total_words * 100):.1f}%"

        stats_label = tk.Label(results_window, text=stats_text, font=("Arial", 14))
        stats_label.pack(pady=10)

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
        if errors:
            errors_frame = tk.LabelFrame(results_window, text="–û—à–∏–±–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞", font=("Arial", 12))
            errors_frame.pack(pady=10, padx=10, fill="both", expand=True)

            errors_text = scrolledtext.ScrolledText(errors_frame, font=("Arial", 11))
            errors_text.pack(pady=5, padx=5, fill="both", expand=True)

            errors_content = "–°–ª–æ–≤–∞ —Å –æ—à–∏–±–∫–∞–º–∏:\n\n"
            for word, error_count in errors.items():
                errors_content += f"‚Ä¢ {word}: {error_count} –æ—à–∏–±–æ–∫\n"

            errors_text.insert("1.0", errors_content)
            errors_text.config(state="disabled")
        else:
            no_errors_label = tk.Label(results_window, text="–í—Å–µ —Å–ª–æ–≤–∞ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ",
                                       font=("Arial", 14), fg="green")
            no_errors_label.pack(pady=20)

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(results_window)
        buttons_frame.pack(pady=10)

        retry_btn = tk.Button(buttons_frame, text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                              command=lambda: self._retry_testing(results_window),
                              font=("Arial", 12), bg="lightblue")
        retry_btn.pack(side="left", padx=5)

        close_btn = tk.Button(buttons_frame, text="‚úì –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                              command=results_window.destroy,
                              font=("Arial", 12), bg="lightgreen")
        close_btn.pack(side="left", padx=5)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        results_window.transient(self.root)
        results_window.grab_set()
        results_window.focus_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        results_window.update_idletasks()
        x = (results_window.winfo_screenwidth() - results_window.winfo_width()) // 2
        y = (results_window.winfo_screenheight() - results_window.winfo_height()) // 2
        results_window.geometry(f"+{x}+{y}")
